# Cursor Rules for this project

You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

## Project Context

**Product:** tacmind - Answer Engine Optimization (AEO) Platform
An enterprise SaaS platform that monitors and optimizes brand visibility in AI-powered search engines (ChatGPT, Claude, Gemini, Perplexity, etc.). The platform helps large companies and agencies position their brands in LLM-generated responses, automate actions to increase mentions and recommendations, and measure Answer Engine Visibility (AEV).

**Core Features:**

- Monitor how LLMs mention brands in responses
- Identify which prompts trigger brand mentions
- Measure citations and sources influencing AI responses
- Recommend and automate improvement actions (content, partnerships, PR, SEO for AI)
- Multi-tenant architecture for agencies managing multiple clients
- Workflow automation integrating with CMS/Slack/Notion

**Target Audience:** Enterprise companies and marketing agencies (B2B)
**Platform Type:** Desktop-first web application (no mobile optimization required)

## Objective

- Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.
- Build enterprise-grade features with focus on data visualization, analytics, and workflow automation.

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Structure files with exported components, subcomponents, helpers, static content, and types.
- Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).

## Language and Communication

- **ALL code must be written in English**: variable names, function names, class names, comments, documentation, etc.
- **ALL user-facing text and UI content must be in English**: button labels, error messages, notifications, placeholders, etc.
- **ALL commit messages must be in English**.
- **ALL comments and documentation must be in English**.
- The user may communicate in Spanish during the conversation, but all generated code, comments, and text content must be in English.
- Use clear, professional English following industry standards and conventions.

## Optimization and Best Practices

- Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.
- Implement dynamic imports for code splitting and optimization.
- **Desktop-first design**: This is an enterprise B2B platform optimized for desktop screens (1280px+). Mobile responsiveness is NOT required.
- Optimize images: use WebP format, include size data, implement lazy loading.
- Focus on performance for data-heavy dashboards and analytics visualizations.

## Error Handling and Validation

- Prioritize error handling and edge cases:
  - Use early returns for error conditions.
  - Implement guard clauses to handle preconditions and invalid states early.
  - Use custom error types for consistent error handling.

## UI and Styling

- Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
- Implement consistent, professional design patterns suitable for enterprise B2B applications.
- Focus on desktop layouts (min-width: 1280px) with spacious, data-rich interfaces.

## State Management and Data Fetching

- Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
- Implement validation using Zod for schema validation.

## Security and Performance

- Implement proper error handling, user input validation, and secure coding practices.
- Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

## Testing and Documentation

- Write unit tests for components using Jest and React Testing Library.
- Provide clear and concise comments for complex logic in English.
- Use JSDoc comments in English for functions and components to improve IDE intellisense.
- All test descriptions, assertions, and error messages must be in English.

## Methodology

1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

**Process**:

1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution.
3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.

---

## Important Reminder

**Language Policy**: Regardless of the language used in the conversation, all code output (including variables, functions, classes, comments, documentation, user-facing text, error messages, and any text content) MUST be written in English. This ensures code maintainability, collaboration, and adherence to international development standards.
